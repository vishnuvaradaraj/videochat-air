<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="components.*"
		xmlns:pbay="services.parabay.*" creationComplete="view1_creationCompleteHandler(event)" viewActivate="view1_viewActivateHandler(event)" viewDeactivate="view1_viewDeactivateHandler(event)"
		xmlns:s="library://ns.adobe.com/flex/spark" title="Login" xmlns:views="views.*" xmlns:assets="assets.*" >

	<fx:Script>
		<![CDATA[
			import air.net.ServiceMonitor;
			import air.net.URLMonitor;
			
			import assets.greenbutton;
			import assets.sfhicon;
			
			import events.UserStatusEvent;
			
			import model.Globals;
			
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.events.ViewNavigatorEvent;
									
			private var globals :Globals = Globals.getInstance();
			
			import p2p.UserObject;
			
			import model.ActionBarItems;
			
			[Bindable]
			public var actionBarItems :ActionBarItems = new ActionBarItems();
			
			private var timer:Timer;
			
			protected var progressPage :UploadProgressView;
			
			protected function handleBusy(isBusy:Boolean):void
			{
				this.busyIndicator.busy = isBusy;
				this.loginButton.enabled = !isBusy;
				this.registerButton.enabled = !isBusy;
				this.username.enabled = !isBusy;
				this.password.enabled = !isBusy;
				
				if (isBusy)
				{
					/*
					progressPage = new UploadProgressView();
					progressPage.show("Initializing...");
					*/
					
					this.watch();
				}
				else
				{
					this.unwatch();
					
					/*
					if (this.progressPage)
					{
						this.progressPage.cancel();
						this.progressPage = null;
					}
					*/
				}
			}
			
			protected function loginButton_clickHandler(event:MouseEvent):void
			{
				this.handleBusy(true);
				loginUserResult.token = parabayService.loginUser(this.username.text, this.password.text, "1");					
			}

			protected function parabayService_faultHandler(event:FaultEvent):void
			{
				trace("Failed to call login service");
				this.handleBusy(false);
			}
			
			protected function onConnect(event:*):void
			{
				this.handleBusy(false);
				
				this.globals.recentUsers.init();
				this.globals.recentChats.init();
				
				if (navigator)
				{
					navigator.popAll();
					navigator.pushView(views.SFHMobileHome);
				}
			}
		
			protected function onDisconnect(event:*):void
			{
				trace("disconnected p2p session");
				this.handleBusy(false);
				infoBar.includeInLayout = true;					
				infoBar.currentState = "error";
				infoBar.message = "Unable to join user network";

			}
			
			protected function phase2Login(user:Object):void
			{
				this.handleBusy(true);
				this.globals.p2pLoginUser(user);				
			}
			
			protected function loginUserResult_resultHandler(event:ResultEvent):void
			{
				this.handleBusy(false);
				
				if ( event.result.status == 0 ) 
				{
					infoBar.includeInLayout = false;		
					
					var user :Object  = null;
					if (event.result.hasOwnProperty("friend"))
					{
						user = event.result.friend;
					}
					else
					{
						user = new Object();
						user.nick = event.result.name;
					}

					globals.token = event.result.token;	
					this.phase2Login(user);

				}				
				else
				{
					trace("Login failure");					
					this.username.text = "";
					this.password.text = "";
					
					infoBar.includeInLayout = true;					
					infoBar.currentState = "error";
					infoBar.message = "Failed to login";

				}
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				navigator.pushView(views.RegisterPage);
			}


			protected function view1_creationCompleteHandler(event:FlexEvent):void
			{
				trace("init login page");
				this.globals.userManager.addEventListener(UserStatusEvent.CONNECTED, this.onConnect);
				this.globals.userManager.addEventListener(UserStatusEvent.DISCONNECTED, this.onDisconnect);
				
				if (globals.token && this.globals.currentUser) 
				{
					this.phase2Login(this.globals.currentUser);					
				}
			}

		

			protected function view1_viewActivateHandler(event:ViewNavigatorEvent):void
			{
				this.actionBarItems = this.globals.actionBarItems;
				this.globals.actionBarItems.refresh = false;
				this.globals.actionBarItems.search = false;
				this.globals.actionBarItems.home = false;
				this.globals.actionBarItems.messages = false;
				this.globals.actionBarItems.more = false;
				this.globals.actionBarItems.back = (navigator.length>1 ? true : false);
				this.globals.actionBarItems.settings = false;
				this.globals.actionBarItems.chat = false;
			}


			protected function view1_viewDeactivateHandler(event:ViewNavigatorEvent):void
			{
				this.globals.actionBarItems = this.actionBarItems;
			}

			public function watch():void
			{
				
				if(timer && timer.running)
				{
					this.unwatch();
					timer = null;
				}
				
				if(!timer)
				{
					timer = new Timer(20000);
					timer.addEventListener(TimerEvent.TIMER, onTimerEvent, false, 0, true);
				}
				
				timer.start();
			}
			
			public function unwatch():void
			{
				if(!timer)
				{
					return;
				}
				
				timer.stop();
				timer.removeEventListener(TimerEvent.TIMER, onTimerEvent);
				timer = null;
			}
			
			private function onTimerEvent(e:TimerEvent):void
			{
				infoBar.includeInLayout = true;					
				infoBar.currentState = "error";
				infoBar.message = "Failed to login (n/w error)";
				
				this.handleBusy(false);
			}


			protected function password_keyDownHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER)
				{
					loginButton_clickHandler(null);
				}
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<s:CallResponder id="loginUserResult" />
		<pbay:Parabay id="parabayService" fault="parabayService_faultHandler(event)" result="loginUserResult_resultHandler(event)"/>
	</fx:Declarations>	

	<s:states>
		<s:State name="portrait" />
		<s:State name="landscape"/>
	</s:states>
	
	<s:VGroup width="100%" height="100%">	
		<views:InfoBar id="infoBar" width="100%" />

		<s:VGroup width="100%" paddingLeft="10" paddingTop="35" paddingRight="20" paddingBottom="20" gap="5">
			<s:VGroup width="100%">
				<s:Label text="Username"/>			
				<s:TextInput id="username" width="100%"/>			
			</s:VGroup>
			
			<s:VGroup width="100%" paddingTop="10">
				<s:Label text="Password"/>
				<s:TextInput id="password" width="100%" displayAsPassword="true" keyDown="password_keyDownHandler(event)"/>
			</s:VGroup>
			
			<s:HGroup width="100%" horizontalAlign="right" paddingTop="5">
				<s:Button id="registerButton" label="New user?" click="button1_clickHandler(event)" height="105%" />
				<mx:Spacer width="100%"/>
				
				<components:BusyIndicator id="busyIndicator" busy="false"  
											  width="45" height="45"  />

				<s:Button id="loginButton" icon="{assets.greenbutton}" label="Sign in" click="loginButton_clickHandler(event)" />	
			</s:HGroup>
		</s:VGroup>
		
		
		<mx:Spacer height="25%"/>

		<s:Line width="100%" includeIn="portrait">
			<s:stroke>
				<s:SolidColorStroke color="#DCE4CD" weight="1"/>		
			</s:stroke>		
		</s:Line>

		<!-- Bottom bar -->
		<s:Group width="100%" height="150" bottom="0">
			<s:HGroup x="0" y="0" paddingLeft="15" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">				
				<assets:sfhicon width="128" height="128" />
				<s:Label text="Searching For Humans 2.0" color="0xFFFFFF"/>
				<mx:Spacer width="100%"/>
			</s:HGroup>
		</s:Group>
	</s:VGroup>	
	
</s:View>
